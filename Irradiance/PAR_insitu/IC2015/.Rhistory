#check code:
Kd.all
Kd.all()
{
source('~/Desktop/Photochemistry_MA/Kd_SeaUV_Fichot/check_code.R')
qqqq
qqq
source('~/Desktop/Photochemistry_MA/Kd_SeaUV_Fichot/check_code.R')
install.packages("gdata")
library("gdata", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source('~/Desktop/Photochemistry_MA/Kd_SeaUV_Fichot/check_code.R')
source('~/Desktop/Photochemistry_MA/Kd_SeaUV_Fichot/check_code.R')
citation()
citation("pkgname")
citation('pkgname')
'citation("pkgname")'
'citation("pkgname")
?read.table
healp.search('Data input')
help.search('Data input')
find(lowess)
find(read.table)
find(fit)
apropos(fit)
apropos(lm)
apropos("lm")
apropos("fit")
find("fit")
find("lowes")
find("lowess")
example(lm)
library(spatial)
library(help=spatial)
objects(grep("spatial",search()))
objects()
trt
trt*3
ls()
ls()
xv <- rnorm(1000,100,10)
xv[seq(25,length(xv),25)]
which(abs(xv-108)==min(ans(xv-108)))
which(abs(xv-108)==min(abs(xv-108)))
xv[174]
x <- c(1,2,3,4,5,7,8,90,6)
x
which(x==5)
which(x==90)
x=1:5
x
x[-3]
t=1:50*(1:50%%7==0)
t
treatment <- letters[1:5]
treatment
t2 <- factor(1 + treatment=="b" + 2*(treatment=="c") + 2*(treatment=="d"))
t2 <- factor(1 + (treatment=="b") + 2*(treatment=="c") + 2*(treatment=="d"))
t2
treatment=="b"
1 + c(0,1,0,0,0) + c(0,0,2,0,0)  + c(0,0,0,2,0)
2700/3600
2700/3600/0.65
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
yyyy=2004
ifelse ((yyyyy %% 4) == 0, max(which(cmleap<=ddd)), max(which(cm<=ddd)))
ifelse ((yyyy %% 4) == 0, max(which(cmleap<=ddd)), max(which(cm<=ddd)))
cmleap = 1+cumsum(c(0,31,29,31,30,31,30,31,31,30,31,30))
ifelse ((yyyy %% 4) == 0, max(which(cmleap<=ddd)), max(which(cm<=ddd)))
ddd=60
ifelse ((yyyy %% 4) == 0, max(which(cmleap<=ddd)), max(which(cm<=ddd)))
mm = ifelse ((yyyy %% 4) == 0, max(which(cmleap<=ddd)), max(which(cm<=ddd)))
mm
d_out=ddd-cmleap[mm]
d_out
d_out=ddd-cmleap[mm-1]
d_out
d_out=ddd-cmleap[mm]+1
d_out
source('~/.active-rstudio-document')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/.active-rstudio-document')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
source('~/Desktop/Artic_DOSES/Rcode/test_get_month_day.R')
length(omd)
summary(omd)
(3e06/3600/24/13/211)*(365-211)
(3e06/3600/24/13/211)
(3e06/3600/13/211)
(3e06/60/13/211)
(3e06/3600/13/211)*5
1.5*73
1.5*73/24
source('~/Desktop/Artic_DOSES/Rcode/DT_Bin2D/DT_Bin2D.R')
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("data.table")
install.packages("lattice")
source('~/Desktop/Artic_DOSES/Rcode/DT_Bin2D/DT_Bin2D.R')
str(movies)
501*501
501*500
View(bins)
movies[, c('ratBin', 'votesBin'):=list(floor(rating/nBins), floor(votes/nBins))]
library(data.table)
data(movies, package='ggplot2')
library(lattice)
movies <- data.table(movies)
nBins <- 500
movies[, c('ratBin', 'votesBin'):=list(floor(rating/nBins), floor(votes/nBins))]
movies[, c('ratBin', 'votesBin'):=list(floor(rating/nBins), floor(votes/nBins))]
setkey(movies, ratBin, votesBin)
library(data.table)
data(movies, package='ggplot2')
library(lattice)
movies <- data.table(movies)
nBins <- 500
## 2D Binning
movies[, c('ratBin', 'votesBin'):=list(floor(rating/nBins), floor(votes/nBins))]
setkey(movies, ratBin, votesBin)
floor(rating/nBins)
floor(movies$rating/nBins)
afloor(movies$rating/nBins)
a=floor(movies$rating/nBins)
summary(a)
a=floor(movies$votes/nBins)
summary(a)
movies3 <- movies2[,lapply(.SD, mean),
by=list(ratBin, votesBin)]
str(movies2)
summary(movies2$rating)
summary(movies2$votes)
source('~/.active-rstudio-document')
View(df.data)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(OUT)
source('~/Desktop/Artic_DOSES/Rcode/Bin2D_1option.R')
DT = data.table(A=5:1,B=letters[5:1])
View(DT)
setkey(DT,B)
DT = data.table(A=5:1,B=letters[5:1])
setkey(DT,B)
rm DT
clear DT
rm( DT)
DT = data.table(A=5:1,B=letters[5:1])
View(DT)
setkey(DT,B)
DT[J("b")]
DT[.("b")]
DT[list("b")]
DT[list("a")]
DT[list("c")]
DT[J("e")]
CJ(c(5,NA,1), c(1,3,2))
CJ(c(5,NA,1), c(1,3,2),sorted = F)
x = c(1,1,2)
y = c(4,6,4)
CJ(x, y, unique=TRUE)
#!/usr/bin/env Rscript
# Re-project from 4.64 to desired grid
# args = commandArgs(TRUE)
# year = args[1]
year = 2003
year = as.character(year) # parallelised: year out of loop
newres = 37 # km, new pixel size
require("splancs")
require("prodlim")
library("ncdf4")
t0 = proc.time()
# Define periods of N days (matching those of temporal binning done previously)
ndays = 8;
ndayperiod = 1 + ndays*(0:(365/ndays));
ndayperiod = ndayperiod[ndayperiod < 366-floor(ndays/2)]; # remove periods starting too close to end of year relative to binning interval
ndayperiod = 137; # UNCOMMENT FOR TESTS
varnameS = c("dmspt_Asst_chlgsm","CF_mean")
# Read new (larger) grid
grid_l = read.table(paste("/Users/martigalitapias/Desktop/Grids_maps/grids/grid",as.character(newres),"km_45N.txt",sep = ""),sep = " ")
grid_l = grid_l[grid_l[,2]<46,] # UNCOMMENT FOR TESTS
lat_l = grid_l$V2
lon_l = grid_l$V1
# Read initial (smaller) grid
# ncgrid_s = nc_open("/Volumes/output-prod/Takuvik/Teledetection/All/Constant/A45N.nc")
ncgrid_s = nc_open("~/Desktop/Grids_maps/grids/A45N.nc")
lat_s = ncvar_get(ncgrid_s, "lat")
lon_s = ncvar_get(ncgrid_s, "lon")
nc_close(ncgrid_s)
# Define function that outputs interval for search in degrees
m2dd<-function(meters,latitude){
return (meters / (111.32 * 1000 * cos(latitude * (pi/ 180))))
}
# Define function that outputs lon-lat (tt) of subpixels corresponding to given macropixel
getpix_in <- function(lat_g, lon_g, lat_p, lon_p, cXY,res){
#print(cXY)
dlon <- m2dd(res/2,lat_g[cXY])
polyX <- c(lon_g[cXY]-dlon,lon_g[cXY]-dlon,lon_g[cXY]+dlon, lon_g[cXY]+dlon)
dlat <- res/2/111.32
polyY <- c(lat_g[cXY]-dlat,lat_g[cXY]+dlat,lat_g[cXY]+dlat,lat_g[cXY]-dlat)
poly <- data.frame(x=polyX, y=polyY)
test <- inout(data.frame(x=c(lon_p), y=c(lat_p)), poly)
tt <- cbind(lon_p[which(test==TRUE)],lat_p[which(test==TRUE)])
return(tt)
}
indexlist = sapply(1:dim(grid_l)[1], function(x)getpix_in(lat_l, lon_l, grid_l$V1, grid_l$V2,x,newres*1000))
head(indexlist)
head(indexlist,10)
#!/usr/bin/env Rscript
# Re-project from 4.64 to desired grid
# args = commandArgs(TRUE)
# year = args[1]
year = 2003
year = as.character(year) # parallelised: year out of loop
newres = 37 # km, new pixel size
require("splancs")
require("prodlim")
library("ncdf4")
t0 = proc.time()
# Define periods of N days (matching those of temporal binning done previously)
ndays = 8;
ndayperiod = 1 + ndays*(0:(365/ndays));
ndayperiod = ndayperiod[ndayperiod < 366-floor(ndays/2)]; # remove periods starting too close to end of year relative to binning interval
ndayperiod = 137; # UNCOMMENT FOR TESTS
varnameS = c("dmspt_Asst_chlgsm","CF_mean")
# Read new (larger) grid
grid_l = read.table(paste("/Users/martigalitapias/Desktop/Grids_maps/grids/grid",as.character(newres),"km_45N.txt",sep = ""),sep = " ")
grid_l = grid_l[grid_l[,2]<46,] # UNCOMMENT FOR TESTS
lat_l = grid_l$V2
lon_l = grid_l$V1
# Read initial (smaller) grid
# ncgrid_s = nc_open("/Volumes/output-prod/Takuvik/Teledetection/All/Constant/A45N.nc")
ncgrid_s = nc_open("~/Desktop/Grids_maps/grids/A45N.nc")
lat_s = ncvar_get(ncgrid_s, "lat")
lon_s = ncvar_get(ncgrid_s, "lon")
nc_close(ncgrid_s)
# Define function that outputs interval for search in degrees
m2dd<-function(meters,latitude){
return (meters / (111.32 * 1000 * cos(latitude * (pi/ 180))))
}
# Define function that outputs lon-lat (tt) of subpixels corresponding to given macropixel
getpix_in <- function(lat_g, lon_g, lat_p, lon_p, cXY,res){
#print(cXY)
dlon <- m2dd(res/2,lat_g[cXY])
polyX <- c(lon_g[cXY]-dlon,lon_g[cXY]-dlon,lon_g[cXY]+dlon, lon_g[cXY]+dlon)
dlat <- res/2/111.32
polyY <- c(lat_g[cXY]-dlat,lat_g[cXY]+dlat,lat_g[cXY]+dlat,lat_g[cXY]-dlat)
poly <- data.frame(x=polyX, y=polyY)
test <- inout(data.frame(x=c(lon_p), y=c(lat_p)), poly)
tt <- cbind(lon_p[which(test==TRUE)],lat_p[which(test==TRUE)])
return(tt)
}
indexlist = sapply(1:dim(grid_l)[1], function(x)getpix_in(lat_l, lon_l, lat_s, lon_s, x, newres*1000))
indexlist
head(indexlist)
head(indexlist,100)
index;ist
indexlist
str(indexlist)
summary(indexlist)
indexlist = sapply(1:10, function(x)getpix_in(lat_l, lon_l, lat_s, lon_s, x, newres*1000))
indexlist
indexlist = sapply(1, function(x)getpix_in(lat_l, lon_l, lat_s, lon_s, x, newres*1000))
grid_l[1,]
#!/usr/bin/env Rscript
# Re-project from 4.64 to desired grid
# args = commandArgs(TRUE)
# year = args[1]
year = 2003
year = as.character(year) # parallelised: year out of loop
newres = 37 # km, new pixel size
require("splancs")
require("prodlim")
library("ncdf4")
t0 = proc.time()
# Define periods of N days (matching those of temporal binning done previously)
ndays = 8;
ndayperiod = 1 + ndays*(0:(365/ndays));
ndayperiod = ndayperiod[ndayperiod < 366-floor(ndays/2)]; # remove periods starting too close to end of year relative to binning interval
ndayperiod = 137; # UNCOMMENT FOR TESTS
varnameS = c("dmspt_Asst_chlgsm","CF_mean")
# Read new (larger) grid
grid_l = read.table(paste("/Users/martigalitapias/Desktop/Grids_maps/grids/grid",as.character(newres),"km_45N.txt",sep = ""),sep = " ")
grid_l = grid_l[grid_l[,2]<46,] # UNCOMMENT FOR TESTS
lat_l = grid_l$V2
lon_l = grid_l$V1
# Read initial (smaller) grid
# ncgrid_s = nc_open("/Volumes/output-prod/Takuvik/Teledetection/All/Constant/A45N.nc")
ncgrid_s = nc_open("~/Desktop/Grids_maps/grids/A45N.nc")
lat_s = ncvar_get(ncgrid_s, "lat")
lon_s = ncvar_get(ncgrid_s, "lon")
nc_close(ncgrid_s)
# Define function that outputs interval for search in degrees
m2dd<-function(meters,latitude){
return (meters / (111.32 * 1000 * cos(latitude * (pi/ 180))))
}
# Define function that outputs lon-lat (tt) of subpixels corresponding to given macropixel
getpix_in <- function(lat_g, lon_g, lat_p, lon_p, cXY,res){
#print(cXY)
dlon <- m2dd(res/2,lat_g[cXY])
polyX <- c(lon_g[cXY]-dlon,lon_g[cXY]-dlon,lon_g[cXY]+dlon, lon_g[cXY]+dlon)
dlat <- res/2/111.32
#     polyY <- c(lat_g[cXY]-dlat,lat_g[cXY]+dlat,lat_g[cXY]+dlat,lat_g[cXY]-dlat)
polyY <- c(lat_g[cXY]-dlon,lat_g[cXY]+dlon,lat_g[cXY]+dlon,lat_g[cXY]-dlon)
poly <- data.frame(x=polyX, y=polyY)
test <- inout(data.frame(x=c(lon_p), y=c(lat_p)), poly)
tt <- cbind(lon_p[which(test==TRUE)],lat_p[which(test==TRUE)])
return(tt)
}
indexlist = sapply(1, function(x)getpix_in(lat_l, lon_l, lat_s, lon_s, x, newres*1000))
View(indexlist)
m2dd(37000,45)
37/2/111.32
m2dd(37000,0)
m2dd(37000/2,0)
37000/2/111.32
370000/2/111.32
370000/1000/2/111.32
37000/1000/2/111.32
#!/usr/bin/env Rscript
# Re-project from 4.64 to desired grid
# args = commandArgs(TRUE)
# year = args[1]
year = 2003
year = as.character(year) # parallelised: year out of loop
newres = 37 # km, new pixel size
require("splancs")
require("prodlim")
library("ncdf4")
t0 = proc.time()
# Define periods of N days (matching those of temporal binning done previously)
ndays = 8;
ndayperiod = 1 + ndays*(0:(365/ndays));
ndayperiod = ndayperiod[ndayperiod < 366-floor(ndays/2)]; # remove periods starting too close to end of year relative to binning interval
ndayperiod = 137; # UNCOMMENT FOR TESTS
varnameS = c("dmspt_Asst_chlgsm","CF_mean")
# Read new (larger) grid
grid_l = read.table(paste("/Users/martigalitapias/Desktop/Grids_maps/grids/grid",as.character(newres),"km_45N.txt",sep = ""),sep = " ")
grid_l = grid_l[grid_l[,2]<46,] # UNCOMMENT FOR TESTS
lat_l = grid_l$V2
lon_l = grid_l$V1
# Read initial (smaller) grid
# ncgrid_s = nc_open("/Volumes/output-prod/Takuvik/Teledetection/All/Constant/A45N.nc")
ncgrid_s = nc_open("~/Desktop/Grids_maps/grids/A45N.nc")
lat_s = ncvar_get(ncgrid_s, "lat")
lon_s = ncvar_get(ncgrid_s, "lon")
nc_close(ncgrid_s)
# Define function that outputs interval for search in degrees
m2dd<-function(meters,latitude){
return (meters / (111.32 * 1000 * cos(latitude * (pi/ 180))))
}
# Define function that outputs lon-lat (tt) of subpixels corresponding to given macropixel
getpix_in <- function(lat_g, lon_g, lat_p, lon_p, cXY,res){
#print(cXY)
dlon <- m2dd(res/2,lat_g[cXY])
polyX <- c(lon_g[cXY]-dlon,lon_g[cXY]-dlon,lon_g[cXY]+dlon, lon_g[cXY]+dlon)
dlat <- res/2/1000/111.32
#     polyY <- c(lat_g[cXY]-dlat,lat_g[cXY]+dlat,lat_g[cXY]+dlat,lat_g[cXY]-dlat)
polyY <- c(lat_g[cXY]-dlon,lat_g[cXY]+dlon,lat_g[cXY]+dlon,lat_g[cXY]-dlon)
poly <- data.frame(x=polyX, y=polyY)
test <- inout(data.frame(x=c(lon_p), y=c(lat_p)), poly)
tt <- cbind(lon_p[which(test==TRUE)],lat_p[which(test==TRUE)])
return(tt)
}
indexlist = sapply(1, function(x)getpix_in(lat_l, lon_l, lat_s, lon_s, x, newres*1000))
a=1:366
a
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
year=2013
year%%4
(year%%4)==0
(2012%%4)==0
source('~/Dropbox/ProgramesRepositoriTi/find_missing_in_year.R')
year
source('~/Dropbox/ProgramesRepositoriTi/find_missing_in_year.R')
source('~/Dropbox/ProgramesRepositoriTi/find_missing_in_year.R')
pi
(6378145*2*pi^2)
(6378145*2*pi^2/1000)
(6378145^2*2*pi/1000)
((6378145^2)*2*pi/1000)
(6378145*2*pi/1000)
(6378145*2*pi/1000)/24/180
(6378145*2*pi/1000)/24/360
source('~/Desktop/Artic_DOSES/Johnson_os-6-913-2010-supplement/K_calcs_Johnson_ OS.R', echo=TRUE)
getwd[]
getwd()
? taylor
apropos("taylor")
a=c(NA,1,NA,2)
a
a>1
cite
cite R
citation("R")
citation("multcomp")
library("multcompView", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
citation("multcompview")
citation("multcompView")
getfilepath <- paste("ls", searchpath, sep = " ")
searchpath
genericname
stnlist <- read.table("~/Desktop/GreenEdge/Irradiance/input.noclim.GEALL.txt")
lutpath <- "/Volumes/taku-njall/LUTS/Ed0moins_LUT.dat"
for (stn in 1:dim(stnlist)[1]){
stnLAT <- stnlist$V1[stn]
stnLON <- stnlist$V2[stn]
stnY <- stnlist$V5[stn]
stnDOY <- stnlist$V6[stn]
# Build file path
genericname <- sprintf("MYD08_D3.A%04i%03i.051.*.hdf", stnY, stnDOY)
searchpath <- sprintf("%s/%04i/%03i/%s", mainpath, stnY, stnDOY, genericname)
# Find the complete filename
getfilepath <- paste("ls", searchpath, sep = " ")
flist <- system(getfilepath, intern = TRUE)
# Test if file found and either go ahead or put filename in list of files not found
if (length(flist) == 0){
write.table(stnlist[stn,], file = "files_not_found.txt", append = TRUE)
}else{
filepath <- flist[1] # Here we assume there is only one such file!
# Build outfilepath
outfilepath <- sprintf("~/Desktop/GreenEdge/Irradiance/Ed_RT_MODISA/Ed0_%04i_%03i_%0.3f_%0.3f.txt", stnY, stnDOY, stnLAT, stnLON)
# Call edMODISA
cmd <- paste("~/svn/Takuvik/Teledetection/Util/Ed/edMODISA", filepath, lutpath, stnLAT, stnLON, stnDOY,">", outfilepath,
sep = " ")
system(cmd)
}
}
mainpath <- "/Volumes/taku-njall/MODISA/L3BIN"
stn<-1
stnLAT <- stnlist$V1[stn]
stnLON <- stnlist$V2[stn]
stnY <- stnlist$V5[stn]
stnDOY <- stnlist$V6[stn]
stnLAT
genericname <- sprintf("MYD08_D3.A%04i%03i.051.*.hdf", stnY, stnDOY)
searchpath <- sprintf("%s/%04i/%03i/%s", mainpath, stnY, stnDOY, genericname)
searchpath
getfilepath <- paste("ls", searchpath, sep = " ")
getfilepath
source('~/Desktop/GreenEdge/Irradiance/match_Ice.R')
View(ice)
source('~/Desktop/GreenEdge/Irradiance/match_Ice.R')
source('~/Desktop/GreenEdge/Irradiance/match_Ice.R')
setwd("~/Desktop/GreenEdge/Irradiance/PAR_insitu/IC2015/")
A<-read.table("GE15_OCR_Ed.dat")
A<-read.ftable("GE15_OCR_Ed.dat")
